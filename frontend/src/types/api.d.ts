/**
 * This file was auto-generated by openapi-typescript.
 * Do not make direct changes to the file.
 */

export interface paths {
    "/users/register": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["UserController_register"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/emailVerify/confirm": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["EmailVerifyController_confirmEmail"];
        put?: never;
        post?: never;
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/emailVerify/resend": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["EmailVerifyController_resend"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/auth/login": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get?: never;
        put?: never;
        post: operations["AuthController_login"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subjects": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SubjectController_findAll"];
        put?: never;
        post: operations["SubjectController_create"];
        delete?: never;
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
    "/subjects/{id}": {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        get: operations["SubjectController_findOne"];
        put: operations["SubjectController_update"];
        post?: never;
        delete: operations["SubjectController_delete"];
        options?: never;
        head?: never;
        patch?: never;
        trace?: never;
    };
}
export type webhooks = Record<string, never>;
export interface components {
    schemas: {
        UserSerializer: {
            id: number;
            username: string;
            email: string;
            full_name: string;
            avatar_url?: string;
            is_active: boolean;
            /** Format: date-time */
            email_verified_at?: string;
            role_id: number;
            role_name: string;
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        RegisterDto: {
            username: string;
            email: string;
            password: string;
            full_name: string;
        };
        LoginDto: {
            username: string;
            password: string;
        };
        LoginResponseDto: {
            access_token: string;
            user: components["schemas"]["UserSerializer"];
        };
        SubjectSerializer: {
            id: number;
            name: string;
            code: string;
            description?: string;
            image_url?: string;
            creator_id: number;
            creator: components["schemas"]["UserSerializer"];
            /** Format: date-time */
            created_at: string;
            /** Format: date-time */
            updated_at: string;
        };
        MessageResponseDto: {
            message: string;
        };
        CreateSubjectDto: {
            name: string;
            code: string;
            description?: string;
            image_url?: string;
        };
        UpdateSubjectDto: {
            name?: string;
            code?: string;
            description?: string;
            image_url?: string;
        };
    };
    responses: never;
    parameters: never;
    requestBodies: never;
    headers: never;
    pathItems: never;
}
export type $defs = Record<string, never>;
export interface operations {
    UserController_register: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["RegisterDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["UserSerializer"];
                        /** @example 200 */
                        statusCode?: number;
                        /** @example Server Response Success */
                        message?: string;
                        /** @example null */
                        error?: string | null;
                    };
                };
            };
        };
    };
    EmailVerifyController_confirmEmail: {
        parameters: {
            query: {
                token: string;
            };
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    EmailVerifyController_resend: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            201: {
                headers: {
                    [name: string]: unknown;
                };
                content?: never;
            };
        };
    };
    AuthController_login: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["LoginDto"];
            };
        };
        responses: {
            default: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": components["schemas"]["LoginResponseDto"];
                };
            };
        };
    };
    SubjectController_findAll: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SubjectSerializer"][];
                        /** @example 200 */
                        statusCode?: number;
                        /** @example Server Response Success */
                        message?: string;
                        /** @example null */
                        error?: string | null;
                    };
                };
            };
        };
    };
    SubjectController_create: {
        parameters: {
            query?: never;
            header?: never;
            path?: never;
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["CreateSubjectDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SubjectSerializer"];
                        /** @example 200 */
                        statusCode?: number;
                        /** @example Server Response Success */
                        message?: string;
                        /** @example null */
                        error?: string | null;
                    };
                };
            };
        };
    };
    SubjectController_findOne: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SubjectSerializer"];
                        /** @example 200 */
                        statusCode?: number;
                        /** @example Server Response Success */
                        message?: string;
                        /** @example null */
                        error?: string | null;
                    };
                };
            };
        };
    };
    SubjectController_update: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody: {
            content: {
                "application/json": components["schemas"]["UpdateSubjectDto"];
            };
        };
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["SubjectSerializer"];
                        /** @example 200 */
                        statusCode?: number;
                        /** @example Server Response Success */
                        message?: string;
                        /** @example null */
                        error?: string | null;
                    };
                };
            };
        };
    };
    SubjectController_delete: {
        parameters: {
            query?: never;
            header?: never;
            path: {
                id: number;
            };
            cookie?: never;
        };
        requestBody?: never;
        responses: {
            200: {
                headers: {
                    [name: string]: unknown;
                };
                content: {
                    "application/json": {
                        data?: components["schemas"]["MessageResponseDto"];
                        /** @example 200 */
                        statusCode?: number;
                        /** @example Server Response Success */
                        message?: string;
                        /** @example null */
                        error?: string | null;
                    };
                };
            };
        };
    };
}
